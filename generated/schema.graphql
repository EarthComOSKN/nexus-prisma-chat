### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateMessage {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Message {
  createdAt: DateTime!
  id: ID!
  inRoom: Room!
  sentBy: User!
  text: String!
}

type MessageConnection {
  aggregate: AggregateMessage!
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
}

input MessageCreateInput {
  id: ID
  inRoom: RoomCreateOneWithoutRoomMessegesInput!
  sentBy: UserCreateOneWithoutMessagesInput!
  text: String!
}

input MessageCreateManyWithoutInRoomInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutInRoomInput!]
}

input MessageCreateManyWithoutSentByInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutSentByInput!]
}

input MessageCreateWithoutInRoomInput {
  id: ID
  sentBy: UserCreateOneWithoutMessagesInput!
  text: String!
}

input MessageCreateWithoutSentByInput {
  id: ID
  inRoom: RoomCreateOneWithoutRoomMessegesInput!
  text: String!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

enum MessageOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  text: String
  text_contains: String
  text_ends_with: String
  text_gt: String
  text_gte: String
  text_in: [String!]
  text_lt: String
  text_lte: String
  text_not: String
  text_not_contains: String
  text_not_ends_with: String
  text_not_in: [String!]
  text_not_starts_with: String
  text_starts_with: String
}

input MessageUpdateInput {
  inRoom: RoomUpdateOneRequiredWithoutRoomMessegesInput
  sentBy: UserUpdateOneRequiredWithoutMessagesInput
  text: String
}

input MessageUpdateManyDataInput {
  text: String
}

input MessageUpdateManyMutationInput {
  text: String
}

input MessageUpdateManyWithoutInRoomInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutInRoomInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutInRoomInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutInRoomInput!]
}

input MessageUpdateManyWithoutSentByInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutSentByInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutSentByInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutSentByInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  data: MessageUpdateManyDataInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateWithoutInRoomDataInput {
  sentBy: UserUpdateOneRequiredWithoutMessagesInput
  text: String
}

input MessageUpdateWithoutSentByDataInput {
  inRoom: RoomUpdateOneRequiredWithoutRoomMessegesInput
  text: String
}

input MessageUpdateWithWhereUniqueWithoutInRoomInput {
  data: MessageUpdateWithoutInRoomDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutSentByInput {
  data: MessageUpdateWithoutSentByDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutInRoomInput {
  create: MessageCreateWithoutInRoomInput!
  update: MessageUpdateWithoutInRoomDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutSentByInput {
  create: MessageCreateWithoutSentByInput!
  update: MessageUpdateWithoutSentByDataInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  inRoom: RoomWhereInput
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  sentBy: UserWhereInput
  text: String
  text_contains: String
  text_ends_with: String
  text_gt: String
  text_gte: String
  text_in: [String!]
  text_lt: String
  text_lte: String
  text_not: String
  text_not_contains: String
  text_not_ends_with: String
  text_not_in: [String!]
  text_not_starts_with: String
  text_starts_with: String
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createMessage(data: MessageCreateInput!): Message!
  createRoom(data: RoomCreateInput!): Room!
  createUser(data: UserCreateInput!): User!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteUser(where: UserWhereUniqueInput!): User
  sentMessage(roomId: ID, text: String, userId: ID): Message!
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  updateManyRooms(data: RoomUpdateManyMutationInput!, where: RoomWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertMessage(create: MessageCreateInput!, update: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message!
  upsertRoom(create: RoomCreateInput!, update: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  message(where: MessageWhereUniqueInput!): Message
  messages(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]!
  messagesConnection(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): MessageConnection!
  messagesInRoom(roomId: ID): [Message!]!
  room(where: RoomWhereUniqueInput!): Room
  rooms(after: String, before: String, first: Int, last: Int, orderBy: RoomOrderByInput, skip: Int, where: RoomWhereInput): [Room!]!
  roomsConnection(after: String, before: String, first: Int, last: Int, orderBy: RoomOrderByInput, skip: Int, where: RoomWhereInput): RoomConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type Room {
  id: ID!
  name: String!
  roomMesseges(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
}

type RoomConnection {
  aggregate: AggregateRoom!
  edges: [RoomEdge!]!
  pageInfo: PageInfo!
}

input RoomCreateInput {
  id: ID
  name: String!
  roomMesseges: MessageCreateManyWithoutInRoomInput
  users: UserCreateManyWithoutRoomsInput
}

input RoomCreateManyWithoutUsersInput {
  connect: [RoomWhereUniqueInput!]
  create: [RoomCreateWithoutUsersInput!]
}

input RoomCreateOneWithoutRoomMessegesInput {
  connect: RoomWhereUniqueInput
  create: RoomCreateWithoutRoomMessegesInput
}

input RoomCreateWithoutRoomMessegesInput {
  id: ID
  name: String!
  users: UserCreateManyWithoutRoomsInput
}

input RoomCreateWithoutUsersInput {
  id: ID
  name: String!
  roomMesseges: MessageCreateManyWithoutInRoomInput
}

type RoomEdge {
  cursor: String!
  node: Room!
}

enum RoomOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input RoomScalarWhereInput {
  AND: [RoomScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [RoomScalarWhereInput!]
  OR: [RoomScalarWhereInput!]
}

input RoomUpdateInput {
  name: String
  roomMesseges: MessageUpdateManyWithoutInRoomInput
  users: UserUpdateManyWithoutRoomsInput
}

input RoomUpdateManyDataInput {
  name: String
}

input RoomUpdateManyMutationInput {
  name: String
}

input RoomUpdateManyWithoutUsersInput {
  connect: [RoomWhereUniqueInput!]
  create: [RoomCreateWithoutUsersInput!]
  delete: [RoomWhereUniqueInput!]
  deleteMany: [RoomScalarWhereInput!]
  disconnect: [RoomWhereUniqueInput!]
  set: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [RoomUpdateManyWithWhereNestedInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutUsersInput!]
}

input RoomUpdateManyWithWhereNestedInput {
  data: RoomUpdateManyDataInput!
  where: RoomScalarWhereInput!
}

input RoomUpdateOneRequiredWithoutRoomMessegesInput {
  connect: RoomWhereUniqueInput
  create: RoomCreateWithoutRoomMessegesInput
  update: RoomUpdateWithoutRoomMessegesDataInput
  upsert: RoomUpsertWithoutRoomMessegesInput
}

input RoomUpdateWithoutRoomMessegesDataInput {
  name: String
  users: UserUpdateManyWithoutRoomsInput
}

input RoomUpdateWithoutUsersDataInput {
  name: String
  roomMesseges: MessageUpdateManyWithoutInRoomInput
}

input RoomUpdateWithWhereUniqueWithoutUsersInput {
  data: RoomUpdateWithoutUsersDataInput!
  where: RoomWhereUniqueInput!
}

input RoomUpsertWithoutRoomMessegesInput {
  create: RoomCreateWithoutRoomMessegesInput!
  update: RoomUpdateWithoutRoomMessegesDataInput!
}

input RoomUpsertWithWhereUniqueWithoutUsersInput {
  create: RoomCreateWithoutUsersInput!
  update: RoomUpdateWithoutUsersDataInput!
  where: RoomWhereUniqueInput!
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  roomMesseges_every: MessageWhereInput
  roomMesseges_none: MessageWhereInput
  roomMesseges_some: MessageWhereInput
  users_every: UserWhereInput
  users_none: UserWhereInput
  users_some: UserWhereInput
}

input RoomWhereUniqueInput {
  id: ID
}

type Subscription {
  newMessage(roomId: ID): Message!
}

type User {
  email: String!
  id: ID!
  messages(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]
  name: String!
  password: String!
  rooms(after: String, before: String, first: Int, last: Int, orderBy: RoomOrderByInput, skip: Int, where: RoomWhereInput): [Room!]
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  email: String!
  id: ID
  messages: MessageCreateManyWithoutSentByInput
  name: String!
  password: String!
  rooms: RoomCreateManyWithoutUsersInput
}

input UserCreateManyWithoutRoomsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRoomsInput!]
}

input UserCreateOneWithoutMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessagesInput
}

input UserCreateWithoutMessagesInput {
  email: String!
  id: ID
  name: String!
  password: String!
  rooms: RoomCreateManyWithoutUsersInput
}

input UserCreateWithoutRoomsInput {
  email: String!
  id: ID
  messages: MessageCreateManyWithoutSentByInput
  name: String!
  password: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
}

input UserUpdateInput {
  email: String
  messages: MessageUpdateManyWithoutSentByInput
  name: String
  password: String
  rooms: RoomUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  email: String
  name: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
}

input UserUpdateManyWithoutRoomsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRoomsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoomsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoomsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessagesInput
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdateWithoutMessagesDataInput {
  email: String
  name: String
  password: String
  rooms: RoomUpdateManyWithoutUsersInput
}

input UserUpdateWithoutRoomsDataInput {
  email: String
  messages: MessageUpdateManyWithoutSentByInput
  name: String
  password: String
}

input UserUpdateWithWhereUniqueWithoutRoomsInput {
  data: UserUpdateWithoutRoomsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput!
  update: UserUpdateWithoutMessagesDataInput!
}

input UserUpsertWithWhereUniqueWithoutRoomsInput {
  create: UserCreateWithoutRoomsInput!
  update: UserUpdateWithoutRoomsDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  messages_every: MessageWhereInput
  messages_none: MessageWhereInput
  messages_some: MessageWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  rooms_every: RoomWhereInput
  rooms_none: RoomWhereInput
  rooms_some: RoomWhereInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
